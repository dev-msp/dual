import { relations } from "drizzle-orm";
import * as sql from "drizzle-orm/sqlite-core";

export const items = sql.sqliteTable("items", {
  id: sql.integer("id").primaryKey(),
  path: sql.blob("path", { mode: "buffer" }).$type<Uint8Array>(),
  album_id: sql.integer("album_id"),
  title: sql.text("title"),
  artist: sql.text("artist"),
  artist_sort: sql.text("artist_sort"),
  artist_credit: sql.text("artist_credit"),
  album: sql.text("album"),
  albumartist: sql.text("albumartist"),
  albumartist_sort: sql.text("albumartist_sort"),
  albumartist_credit: sql.text("albumartist_credit"),
  genre: sql.text("genre"),
  style: sql.text("style"),
  discogs_albumid: sql.integer("discogs_albumid"),
  discogs_artistid: sql.integer("discogs_artistid"),
  discogs_labelid: sql.integer("discogs_labelid"),
  lyricist: sql.text("lyricist"),
  composer: sql.text("composer"),
  composer_sort: sql.text("composer_sort"),
  work: sql.text("work"),
  mb_workid: sql.text("mb_workid"),
  work_disambig: sql.text("work_disambig"),
  arranger: sql.text("arranger"),
  grouping: sql.text("grouping"),
  year: sql.integer("year"),
  month: sql.integer("month"),
  day: sql.integer("day"),
  track: sql.integer("track"),
  tracktotal: sql.integer("tracktotal"),
  disc: sql.integer("disc"),
  disctotal: sql.integer("disctotal"),
  lyrics: sql.text("lyrics"),
  comments: sql.text("comments"),
  bpm: sql.integer("bpm"),
  comp: sql.integer("comp"),
  mb_trackid: sql.text("mb_trackid"),
  mb_albumid: sql.text("mb_albumid"),
  mb_artistid: sql.text("mb_artistid"),
  mb_albumartistid: sql.text("mb_albumartistid"),
  mb_releasetrackid: sql.text("mb_releasetrackid"),
  trackdisambig: sql.text("trackdisambig"),
  albumtype: sql.text("albumtype"),
  albumtypes: sql.text("albumtypes"),
  label: sql.text("label"),
  acoustid_fingerprint: sql.text("acoustid_fingerprint"),
  acoustid_id: sql.text("acoustid_id"),
  mb_releasegroupid: sql.text("mb_releasegroupid"),
  asin: sql.text("asin"),
  isrc: sql.text("isrc"),
  catalognum: sql.text("catalognum"),
  script: sql.text("script"),
  language: sql.text("language"),
  country: sql.text("country"),
  albumstatus: sql.text("albumstatus"),
  media: sql.text("media"),
  albumdisambig: sql.text("albumdisambig"),
  releasegroupdisambig: sql.text("releasegroupdisambig"),
  disctitle: sql.text("disctitle"),
  encoder: sql.text("encoder"),
  rg_track_gain: sql.real("rg_track_gain"),
  rg_track_peak: sql.real("rg_track_peak"),
  rg_album_gain: sql.real("rg_album_gain"),
  rg_album_peak: sql.real("rg_album_peak"),
  r128_track_gain: sql.real("r128_track_gain"),
  r128_album_gain: sql.real("r128_album_gain"),
  original_year: sql.integer("original_year"),
  original_month: sql.integer("original_month"),
  original_day: sql.integer("original_day"),
  initial_key: sql.text("initial_key"),
  length: sql.integer("length"),
  bitrate: sql.integer("bitrate"),
  format: sql.text("format"),
  samplerate: sql.integer("samplerate"),
  bitdepth: sql.integer("bitdepth"),
  channels: sql.integer("channels"),
  mtime: sql.integer("mtime"),
  added: sql.integer("added"),
});

export const itemAttributes = sql.sqliteTable("item_attributes", {
  id: sql.integer("id").primaryKey(),
  entity_id: sql.integer("entity_id").references(() => items.id),
  key: sql.text("key"),
  value: sql.text("value"),
});

export const itemsRelations = relations(items, ({ many }) => ({
  attributes: many(itemAttributes),
}));

export const itemAttributesRelations = relations(itemAttributes, ({ one }) => ({
  item: one(items, {
    fields: [itemAttributes.entity_id],
    references: [items.id],
  }),
}));

export const albums = sql.sqliteTable("albums", {
  id: sql.integer("id").primaryKey(),
  artpath: sql.blob("path", { mode: "buffer" }).$type<Uint8Array>(),
  added: sql.real("added"),
  albumartist: sql.text("albumartist"),
  albumartist_sort: sql.text("albumartist_sort"),
  albumartist_credit: sql.text("albumartist_credit"),
  album: sql.text("album"),
  genre: sql.text("genre"),
  style: sql.text("style"),
  discogs_albumid: sql.integer("discogs_albumid"),
  discogs_artistid: sql.integer("discogs_artistid"),
  discogs_labelid: sql.integer("discogs_labelid"),
  year: sql.integer("year"),
  month: sql.integer("month"),
  day: sql.integer("day"),
  disctotal: sql.integer("disctotal"),
  comp: sql.integer("comp"),
  mb_albumid: sql.text("mb_albumid"),
  mb_albumartistid: sql.text("mb_albumartistid"),
  albumtype: sql.text("albumtype"),
  albumtypes: sql.text("albumtypes"),
  label: sql.text("label"),
  mb_releasegroupid: sql.text("mb_releasegroupid"),
  asin: sql.text("asin"),
  catalognum: sql.text("catalognum"),
  script: sql.text("script"),
  language: sql.text("language"),
  country: sql.text("country"),
  albumstatus: sql.text("albumstatus"),
  albumdisambig: sql.text("albumdisambig"),
  releasegroupdisambig: sql.text("releasegroupdisambig"),
  rg_album_gain: sql.real("rg_album_gain"),
  rg_album_peak: sql.real("rg_album_peak"),
  r128_album_gain: sql.integer("r128_album_gain"),
  original_year: sql.integer("original_year"),
  original_month: sql.integer("original_month"),
  original_day: sql.integer("original_day"),
});
